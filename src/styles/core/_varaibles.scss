// ========== // 
// TYPOGRAPHY // 
// ========== // 
$font-families: (
  base: "Onest",
  headings: "Onest",
  displays: "Onest"
);

$line-heights: (
  1: 1,
  25: 1.25,
  50: 1.5,
  75: 1.75,
  2: 2,
);

$text-aligns: (
  left: left, 
  center: center, 
  right: right, 
  justify: justify
);

$font-weights: (
  lighter: lighter, 
  bolder: bolder, 

  100: 100, // thin
  200: 200, // extra light
  300: 300, // light
  400: 400, // normal
  500: 500, // medium
  600: 600, // semi bold
  700: 700, // bold
  800: 800, // extra bold
  900: 900, // black
);

$text-transforms: (
  lowercase: lowercase, 
  uppercase: uppercase, 
  capitalize: capitalize
);

$font-styles: (
  normal: normal, 
  italic: italic, 
  oblique: oblique
);

$text-decorations: (
  underline: underline, 
  line-through: line-through, 
  none: none
);

$text-wraps: (
  normal: normal,
  nowrap: nowrap,
  pre: pre,
  pre-line: pre-line,
  pre-wrap: pre-wrap
);

$letter-spacings: (
  normal: normal,
  tight: -0.05em,
  wide: .1em,
  wider: .5em,
);


// ======== // 
// HEADINGS //
// ======== // 
$headings-fz: (
  h1: 4.5rem,
  h2: 2.5rem,
  h3: 1.75rem,
  h4: 1.25rem,
  h5: 1rem,
  h6: 0.875rem,
);
$headings-lh: map-get($line-heights, 25);
$headings-fw: map-get($font-weights, 500);
$headings-margins: (
  top: 1.5em,
  bottom: 0.5em,
);
$headings-breake: true; // should or not headings be lowered on specific breakpoint
$headings-breakepoint: 'sm'; // on which breakpoint headings will have lowered font-size
$headings-decrease: 0.75; // ratio of how lower will be font-size for headings after breakpoint


// ======== // 
// DISPLAYS // 
// ======== // 
$displays-fz: (
  display-1: 74px,
  display-2: 62px,
  display-3: 48px,
  display-4: 34px,
);
$displays-lh: map-get($line-heights, 25);
$displays-fw: map-get($font-weights, 500);
$displays-margins: (
  top: 1.5em,
  bottom: 1em,
);
$displays-breake: true; // should or not displays be lowered on specific breakpoint
$displays-breakepoint: 'sm'; // on which breakpoint displays will have lowered font-size
$displays-decrease: 0.75; // ratio of how lower will be font-size for displays after breakpoint


// ======= //
// SPACING // 
// ======= // 
$spacers: (
  0: 0,
  25: 0.25rem,
  50: 0.5rem,
  75: 0.75rem,
  1: 1rem,
  2: 2rem,
  3: 3rem,
  4: 4rem,
  5: 5rem,
  auto: auto
);


// ====== //
// COLORS //
// ====== // 
// List of colors defined by user
$colors: (
  'black':     #000000,
  'dark':      #343a40,
  'grey':      #E5EBEB,
  'light':     #F9F9F9,
  'white':     #ffffff,
  'red':       #f94144,
  'orange':    #f3722c,
  'amber':     #f8961e,
  'yellow':    #f9c74f,
  'green':     #00B154,
  'turquoise': #43aa8b,
  'pale':      #6A747D,
  'cyan':      #bbadff,
  'blue':      #4361ee,
  'purple':    #682cab,
);

// Pick up theme colors from basic color pallete or material colors
$theme-colors: (
  'primary':    map-get($colors, 'purple'),
  'secondary':  map-get($colors, 'pale'),
  'success':    map-get($colors, 'green'),
  'info':       map-get($colors, 'cyan'),
  'warning':    map-get($colors, 'yellow'),
  'danger':     map-get($colors, 'red'),
  'light':      map-get($colors, 'light'),
  'dark':       map-get($colors, 'dark'),
);

// Levels of lighten, darken, saturate and desaturate values of colors in $colors list
$levels: (
  1: 5%,
  2: 10%,
  3: 15%,
  4: 20%,
  5: 25%,
);

// Basic page settings
$body-bg:           map-get($colors, 'white');
$body-color:        map-get($colors, 'dark');
$border-color:      map-get($colors, 'grey');
$headings-color:    map-get($colors, 'black');


// ========= //
// GRADIENTS //
// ========= // 
$gradients: (
  docsmenu: (
    145deg,
    lighten(map-get($theme-colors, primary), map-get($levels, 5)),
    lighten(map-get($theme-colors, success), map-get($levels, 5))),

  pro: (
    to top,
    lighten(map-get($theme-colors, primary), 20%),
    map-get($theme-colors, primary)),
);


// ==== // 
// GRID // 
// ==== // 
// Base grid settings
$num-cols:           12;
$gutter-width:       1rem;
$container-width:    1280px;

// Dublicated in store/modules/config.js
$breakpoints: (
  'xs': 576px,
  'sm': 768px,
  'md': 1024px,
  'lg': 1280px,
  'xl': 1600px,
);

// Queries between breakpoints
$xs-sm: "screen and (min-width: #{map-get($breakpoints, 'xs') + 'px'}) and (max-width: #{map-get($breakpoints, 'sm') - 1px})" !default;
$sm-md: "screen and (min-width: #{map-get($breakpoints, 'sm') + 'px'}) and (max-width: #{map-get($breakpoints, 'md') - 1px})" !default;
$md-lg: "screen and (min-width: #{map-get($breakpoints, 'md') + 'px'}) and (max-width: #{map-get($breakpoints, 'lg') - 1px})" !default;
$lg-xl: "screen and (min-width: #{map-get($breakpoints, 'lg') + 'px'}) and (max-width: #{map-get($breakpoints, 'xl') - 1px})" !default;

// Queries based on min-width
$xs-up: "screen and (min-width: #{map-get($breakpoints, 'xs') + 'px'})" !default;
$sm-up: "screen and (min-width: #{map-get($breakpoints, 'sm') + 'px'})" !default;
$md-up: "screen and (min-width: #{map-get($breakpoints, 'md') + 'px'})" !default;
$lg-up: "screen and (min-width: #{map-get($breakpoints, 'lg') + 'px'})" !default;
$xl-up: "screen and (min-width: #{map-get($breakpoints, 'xl') + 'px'})" !default;

// Queries based on max-width
$xs-dw: "screen and (max-width: #{map-get($breakpoints, 'xs') - 1px})" !default;
$sm-dw: "screen and (max-width: #{map-get($breakpoints, 'sm') - 1px})" !default;
$md-dw: "screen and (max-width: #{map-get($breakpoints, 'md') - 1px}" !default;
$lg-dw: "screen and (max-width: #{map-get($breakpoints, 'lg') - 1px})" !default;
$xl-dw: "screen and (max-width: #{map-get($breakpoints, 'xl') - 1px})" !default;


// ===== //
// ICONS // 
// ===== // 
$icon-sizes: 18, 24, 36, 48;

// ======= // 
// SHADOWS // 
// ======= // 
// List of shadows defined by user
$shadows: (
  none: none,
  small: 1px 1px 3px map-get($colors, 'black'),
  base: 3px 3px 6px map-get($theme-colors, 'primary'),
  large: (4px 4px 8px rgba(map-get($colors, 'black'), .5), 6px 7px 24px rgba(map-get($theme-colors, 'warning'), .75)),
);

// List of shadows based on Material methodology
// See more on https://material.io/design/environment/light-shadows.html
$material-shadows-support: true; 
$material-shadows: (
  1: (0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)),
  2: (0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)),
  3: (0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)),
  4: (0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)),
  5: (0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22)),
);


// =========== // 
// TRANSITIONS //
// =========== // 
$transition-speed: (
  shortest: .15s,
  shorter: .2s,
  short: .25s,
  base: .3s,
  slow: .375s,
  lazy: .75s,
);

$transition-timings: (
  // "Standard" easings ðŸ‘‰ https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function#easing_functions
  linear: cubic-bezier(0, 0, 1, 1),
  ease: cubic-bezier(0.25, 0.1, 0.25, 1),
  ease-in: cubic-bezier(0.42, 0, 1, 1),
  ease-out: cubic-bezier(0,0,0.58,1),
  ease-in-out: cubic-bezier(0.42, 0, 0.58, 1),

  // Material easings ðŸ‘‰ https://material.io/design/motion/speed.html#easing
  standard: cubic-bezier(0.4, 0, 0.2, 1), // speed up quickly and slow down gradually, in order to emphasize the end of the transition
  emphasized: cubic-bezier(0.0, 0, 0.2, 1), // speed up quickly and slow down very gradually, placing extra emphasis on the end of the transition
  decelerated: cubic-bezier(0.0, 0.0, 0.2, 1), // transitions begin at peak velocity (the fastest point in an element's movement) and end at rest
  accelerated: cubic-bezier(0.4, 0.0, 1, 1), // transition in which the element starts at rest and ends at peak velocity

  // Custom easings (here you can add new ones)
  sharp: cubic-bezier(0.4, 0, 0.6, 1) // the sharp curve is used for objects that may return to the screen at any time
);