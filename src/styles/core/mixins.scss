@mixin linear-gradient($args...) {
  /// Mixin generates code that includes the default color for browsers 
  /// that do not support linear gradients and modern syntax
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://caniuse.com/?search=linear-gradient
  /// @link https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient
  /// @link https://www.colorzilla.com/gradient-editor/
  ///
  /// @param $args: { Function } [map-get function to access $gradients map]
  /// 
  /// @example
  ///   @include linear-gradient(map-get($gradients, 'primary_success'));
  ///
  /// @output
  ///   background: #682cab;
  ///   background: linear-gradient(145deg, #8e51d2 10%, #68c279 80%);
  ///
  /// @example
  ///   $storedGradient: map-get($gradients, 'primary_success');
  ///   @include linear-gradient($storedGradient);
  ///
  /// @output
  ///   background: #682cab;
  ///   background: linear-gradient(145deg, #8e51d2 10%, #68c279 80%);

  $direction: nth(nth(nth($args, 1), 1), 2);
  $fallback:  nth(nth(nth($args, 1), 2), 2);
  $list:      nth(nth(nth($args, 1), 3), 2);

  background: $fallback;
  background: linear-gradient($direction, $list);
};

@mixin small() {
  /// Small mixin that injects small font-size styles
  /// See _varaibles.scss file for params $base-fz, $base-lh and $small-fz
  /// By default they are: 16px, 1.5, 0.875
  ///
  /// @author nightrunner91
  ///
  /// @link https://github.com/nightrunner91/nightvue
  /// 
  /// @example
  ///   @include small();
  ///
  /// @output
  ///   font-size: 14px;
  ///   line-height: 1.3125;

  font-size: $base-fz * $small-fz;
  line-height: $base-lh * $small-fz;
};

@mixin pseudoelem() {
  /// Often you need to add &:before or &:after for decoration purposes
  /// Just for that you have this small mixin to simplify your work
  ///
  /// @example
  ///   @include pseudoelem();

  content: '';
  display: block;
  position: absolute;
}

@mixin icon-size($d1, $d2:false) {
  /// This mixin apply specific width, height and background-size
  /// If you apply this mixin to selector you can be pretty sure it will have
  /// passed dimensions no matter what and will not be compressed or stretched
  /// It is most usefull for SVG icons inside flex container
  ///
  /// @author nightrunner91
  ///
  /// @link https://github.com/nightrunner91/nightvue
  ///
  /// @param $d1: { Number }, [required, dimension X (width)]
  /// @param $d2: { Number }, [dimension Y (height)]
  /// 
  /// @example
  ///   @include icon-size(24);
  ///
  /// @output
  ///   width: 24px !important;
  ///   max-width: 24px !important;
  ///   min-width: 24px !important;
  ///   height: 24px !important;
  ///   max-height: 24px !important;
  ///   min-height: 24px !important;
  ///   background-size: 24px 24px !important;
  ///
  /// @example
  ///   @include icon-size(18, 34);
  ///
  /// @output
  ///   width: 18px !important;
  ///   max-width: 18px !important;
  ///   min-width: 18px !important;
  ///   height: 34px !important;
  ///   max-height: 34px !important;
  ///   min-height: 34px !important;
  ///   background-size: 18px 34px !important;

  width: $d1 + px !important;
  max-width: $d1 + px !important;
  min-width: $d1 + px !important;

  @if ($d2) {
    height: $d2 + px !important;
    max-height: $d2 + px !important;
    min-height: $d2 + px !important;
    background-size: $d1 + px $dimension2 + px !important;
  } @else {
    height: $d1 + px !important;
    max-height: $d1 + px !important;
    min-height: $d1 + px !important;
    background-size: $d1 + px $d1 + px !important;
  }
};

@mixin transition($property, $speed:base, $timing:ease, $delay:0s) {
  /// Mixin applies transition from $transition-speed and $transition-timings maps
  ///
  /// @author nightrunner91
  ///
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions
  /// @link https://caniuse.com/?search=transition
  ///
  /// @param $property: { String }, [transition-property, required]
  /// @param $speed:    { String }, [transition-speed, default 'base' => .3s]
  /// @param $timing:   { String }, [transition-timing-function, default 'ease']
  /// @param $delay:    { Number }, [transition-delay, default 0s]
  ///
  /// @example
  ///   @include transition(transform);
  ///   @include transition(opacity, short, ease-in);
  ///   @include transition(background-color, slow, emphasized);
  ///   @include transition(color, lazy, linear, 1s);
  ///
  /// @output
  ///   transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
  ///   transition: opacity 0.25s cubic-bezier(0.42, 0, 1, 1);
  ///   transition: background-color 0.375s cubic-bezier(0, 0, 0.2, 1);
  ///   transition: color 0.75s cubic-bezier(0, 0, 1, 1) 1s;

  $delayCond: if($delay != 0s, $delay, null);

  transition: $property map-get($transition-speed, $speed) map-get($transition-timings, $timing) $delayCond
};

@mixin complex-transition($args...) {
  /// Mixin that can apply many transition properties to selector
  /// It uses transition() function which returns needed transition properties
  /// from $transition-speed and $transition-timings maps
  /// See also functions.scss file for transition() function.
  /// It actualy works almost the same as @transition mixin above
  ///
  /// @author nightrunner91
  ///
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions
  /// @link https://caniuse.com/?search=transition
  ///
  /// @param $args: { Array }, [list of properties with params, required]
  ///
  /// @example
  ///   @include complex-transition(
  ///     transition(opacity, short, ease-in),
  ///     transition(background-color, slow, emphasized),
  ///     transition(color, lazy, linear, 1s),
  ///   );
  ///
  /// @output
  ///   transition: opacity 0.25s cubic-bezier(0.42, 0, 1, 1), background-color 0.375s cubic-bezier(0, 0, 0.2, 1), color 0.75s cubic-bezier(0, 0, 1, 1) 1s;

  transition: $args;
};

@mixin text-truncate($width) {
  /// Mixin applies truncated text effect to selector
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://css-tricks.com/snippets/css/truncate-string-with-ellipsis/
  /// @link https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/white-space
  ///
  /// @param $width: { Number } [maximum width of text, px | %]
  /// 
  /// @example
  ///   @include text-truncate(150px);
  ///
  /// @output
  ///   display: inline-block;
  ///   overflow: hidden;
  ///   text-overflow: ellipsis;
  ///   white-space: nowrap;
  ///   max-width: 150px;

  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: $width;
};

@mixin animation($name, $duration, $delay:0s, $count:1, $direction:normal, $timing:ease, $mode:forwards) {
  /// Mixin applies animation to selector with passed params
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Animations/Using_CSS_animations
  ///
  /// @param $name:      { String }           [animation name]
  /// @param $duration:  { Number }           [animation duration, s | ms]
  /// @param $delay:     { Number }           [animation delsy, s | ms, default: 0s]
  /// @param $count:     { Number | String }  [animation-iteration-count, Number | infinite, default: 1]
  /// @param $direction: { String }           [animation-direction, normal | reverse | alternate | alternate-reverse, default: normal]
  /// @param $timing:    { String }           [easing type for animation, default: ease]
  /// @param $mode:      { String }           [animation-fill-mode, forwards | backwards | both, dwfault: forwards]
  /// 
  /// @example
  ///   @include animation('');
  ///
  /// @output
  ///   display: inline-block;
  ///   overflow: hidden;
  ///   text-overflow: ellipsis;
  ///   white-space: nowrap;
  ///   max-width: 150px;

  animation-name: $name;
  animation-duration: $duration;
  animation-delay: $delay;
  animation-iteration-count: $count;
  animation-direction: $direction;
  animation-timing-function: $timing;
  animation-fill-mode: $mode;
};
