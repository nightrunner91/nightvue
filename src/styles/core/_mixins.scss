@mixin animation($name, $duration, $delay, $count, $timing, $mode) {
  animation-name: $name;
  animation-duration: $duration;
  animation-timing-function: $timing;
  animation-fill-mode: forwards;
  animation-delay: $delay;
  animation-iteration-count: $count;
  animation-direction: $mode;
}

@mixin background($name, $style: false, $rate: false) {
  @if $name == 'shade' {
    @if $rate > $shadesNum or $rate < 0 {
      background-color: white !important;

      @debug "Looks like you are trying to apply level of shade that doens't exit. Take a look at $shades: Number varaible."
    } @else {
      background-color: map-get($shades, 'shade-#{$rate}') !important;
    }
  } @else {
    $targetMap: $colors;
    @if map-has-key($theme-colors, $name) {
      $targetMap: $theme-colors;
    }

    @if $style {
      @if $style == 'light' {
        background-color: mix(white, map-get($targetMap, $name), map-get($levels, $rate)) !important
      } @else if $style == 'dark' {
        background-color: mix(black, map-get($targetMap, $name), map-get($levels, $rate)) !important
      }
    } @else {
      background-color: map-get($targetMap, $name) !important
    }
  }
}

@mixin color($name, $style: false, $rate: false) {
  @if $name == 'shade' {
    // $step: 100 / ($shades + 2) * 1%;
    // $percent: $step * $rate;

    // @if $percent > 100 or $percent < 0 {
    //   color: white !important;

    //   @debug "Looks like you are trying to apply level of shade that doens't exit. Take a look at $shades: Number varaible."
    // } @else {
    //   color: darken(white, $percent) !important;
    // }
  } @else {
    $targetMap: $colors;
    @if map-has-key($theme-colors, $name) {
      $targetMap: $theme-colors;
    }

    @if $style {
      @if $style == 'light' {
        color: mix(white, map-get($targetMap, $name), map-get($levels, $rate)) !important
      } @else if $style == 'dark' {
        color: mix(black, map-get($targetMap, $name), map-get($levels, $rate)) !important
      }
    } @else {
      color: map-get($targetMap, $name) !important
    }
  }
}

@mixin fill($name, $style: false, $rate: false) {
  @if $name == 'shade' {
    // $step: 100 / ($shades + 2) * 1%;
    // $percent: $step * $rate;

    // @if $percent > 100 or $percent < 0 {
    //   fill: white !important;

    //   @debug "Looks like you are trying to apply level of shade that doens't exit. Take a look at $shades: Number varaible."
    // } @else {
    //   fill: darken(white, $percent) !important;
    // }
  } @else {
    $targetMap: $colors;
    @if map-has-key($theme-colors, $name) {
      $targetMap: $theme-colors;
    }

    @if $style {
      @if $style == 'light' {
        fill: mix(white, map-get($targetMap, $name), map-get($levels, $rate)) !important
      } @else if $style == 'dark' {
        fill: mix(black, map-get($targetMap, $name), map-get($levels, $rate)) !important
      }
    } @else {
      fill: map-get($targetMap, $name) !important
    }
  }
}

@mixin linear-gradient($gradient...) {
  background-color: nth(nth($gradient, 1), 2);
  background-image: linear-gradient($gradient);
}

@mixin shadow($name) {
  $targetMap: $shadows;
  @if map-has-key($material-shadows, $name) {
    $targetMap: $material-shadows;
  }

  box-shadow: map-get($targetMap, $name)
}

@mixin icon-size($dimension1, $dimesnion2:false) {
  width: $dimension1 + px !important;
  max-width: $dimension1 + px !important;
  min-width: $dimension1 + px !important;

  @if ($dimesnion2) {
    height: $dimesnion2 + px !important;
    max-height: $dimesnion2 + px !important;
    min-height: $dimesnion2 + px !important;
    background-size: $dimension1 + px $dimension2 + px !important;
  } @else {
    height: $dimension1 + px !important;
    max-height: $dimension1 + px !important;
    min-height: $dimension1 + px !important;
    background-size: $dimension1 + px $dimension1 + px !important;
  }
}

@mixin transition($property, $speed, $timing, $delay:0s) {
  transition: $property map-get($transition-speed, $speed) map-get($transition-timings, $timing) $delay
}

@mixin complex-transition($args...) {
  transition: $args;
}
