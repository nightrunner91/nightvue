$aligns: (
  left: left, 
  center: center, 
  right: right, 
  justify: justify
);

$weights: (
  lighter: lighter, 
  bolder: bolder, 

  100: 100, // thin
  200: 200, // extra light
  300: 300, // light
  400: 400, // normal
  500: 500, // medium
  600: 600, // semi bold
  700: 700, // bold
  800: 800, // extra bold
  900: 900, // black

  inherit: inherit,
  initial: initial,
  unset: unset
);

$transforms: (
  lowercase: lowercase, 
  uppercase: uppercase, 
  capitalize: capitalize
);

$styles: (
  normal: normal, 
  italic: italic, 
  oblique: oblique
);

$decorations: (
  underline: underline, 
  line-through: line-through, 
  none: none
);

$line-heights: (
  1: 1,
  25: 1.25,
  50: 1.5,
  75: 1.75,
  2: 2,
);

$headings-fz: (
  h1: 2.25rem,
  h2: 1.875rem,
  h3: 1.5rem,
  h4: 1.125rem,
  h5: 1rem,
  h6: 0.875rem,
);
$headings-lh: map-get($line-heights, 25);
$headings-fw: map-get($weights, 500);
$headings-margins: (
  top: 0,
  bottom: 0.5em,
);
$headings-breake: true; // should or not headings be lowered on specific breakpoint
$headings-breakepoint: 'sm'; // on which breakpoint headings will have lowered font-size
$headings-decrease: 0.75; // ratio of how lower will be font-size for headings after breakpoint

$font-families: (
  base: "Inter",
  headings: "Montserrat",
  displays: "Montserrat"
);

$displays-fz: (
  display-1: 74px,
  display-2: 62px,
  display-3: 48px,
  display-4: 34px,
);
$displays-lh: map-get($line-heights, 25);
$displays-fw: map-get($weights, 500);
$displays-margins: (
  top: 0,
  bottom: 1em,
);
$displays-breake: true; // should or not displays be lowered on specific breakpoint
$displays-breakepoint: 'sm'; // on which breakpoint displays will have lowered font-size
$displays-decrease: 0.75; // ratio of how lower will be font-size for displays after breakpoint

$base-fz: 16px;
$base-lh: map-get($line-heights, 50);
$base-fw: map-get($weights, 400);
$base-mg: 1.5em;
$small-fz: 0.875; // ratio of how lower will be font-size for <small> tag

@each $heading, $size in $headings-fz {
  #{$heading},
  .#{$heading} {
    font-size: $size;

    @if ($headings-breake) {
      @media screen and (min-width: map-get($breakpoints, $headings-breakepoint)px) {
        font-size: $size * $headings-decrease
      }
    }
  }
}

@each $display, $size in $displays-fz {
  .#{$display} {
    font-size: $size;
    font-family: map-get($font-families, displays), sans-serif;
    font-weight: $displays-fw;
    line-height: $displays-lh;

    @if ($displays-breake) {
      @media screen and (min-width: map-get($breakpoints, $displays-breakepoint)px) {
        font-size: $size * $displays-decrease
      }
    }
  }
}

@each $heading, $size in $headings-fz {
  #{$heading},
  .#{$heading} {
    font-size: $size;

    @if ($headings-breake) {
      @media screen and (min-width: map-get($breakpoints, $headings-breakepoint)px) {
        font-size: $size * $headings-decrease
      }
    }
  }
}

@each $lh, $size in $line-heights {
  .lh-#{$lh} {
    line-height: $size;
  }
}

@mixin makeText($breakpoint:null) {
  @each $align, $value in $aligns {
    .text#{$breakpoint}-#{$align} { text-align: $value !important; }
  }
  
  @each $weight, $value in $weights {
    .font-weight#{$breakpoint}-#{$weight} { font-weight: $value !important; }
  }
  
  @each $transform, $value in $transforms {
    .text#{$breakpoint}-#{$transform} { text-transform: $value !important; }
  }
  
  @each $style, $value in $styles {
    .font#{$breakpoint}-#{$style} { font-style: $value !important; }
  }

  @each $decoration, $value in $decorations {
    .text#{$breakpoint}-#{$decoration} { text-decoration: $value !important; }
  }
}

@include makeText();

@each $breakpoint, $size in $breakpoints {
  @media screen and (min-width: #{$size}px) {
    @include makeText('-' + $breakpoint);
  }
}

body {
  overflow-x: hidden;
  overflow-y: visible;
  font-family: map-get($font-families, base), sans-serif;
  font-weight: map-get($weights, 400);
  font-size: $base-fz;
  line-height: $base-lh;
  background: $body-bg;
  color: $body-color;

  &.body--locked { overflow-y: hidden }
}

h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3, .h4, .h5, .h6 {
  font-family: map-get($font-families, headings), sans-serif;
  font-weight: $headings-fw;
  line-height: $headings-lh;
  color: map-get($theme-colors, 'dark');
}
  
h1, h2, h3, h4, h5, h6 {
  display: block;
  margin-top: map-get($headings-margins, top);
  margin-bottom: map-get($headings-margins, bottom);
}

p,
ul,
ol,
pre,
table,
blockquote {
  display: block;
  margin-top: 0;
  margin-bottom: $base-mg;
  padding: 0;
  font-size: $base-fz;
  line-height: $base-lh;
}

ul,
ol {
  padding-left: 2rem
}

small,
.small {
  font-size: $base-fz * $small-fz;
  line-height: $base-lh * $small-fz;
}

hr {
  box-sizing: border-box;
  height: 0;
  margin-top: $base-mg;
  margin-bottom: $base-mg;
  border: none;
  border-bottom: 1px solid lighten(map-get($theme-colors, 'secondary'), 45%);
}

mark {
  background-color: rgba(map-get($colors, 'black'), 0.75);
}

code,
pre {
  background: rgba(map-get($colors, 'black'), 0.25);
}

a {
  @include color('primary');
  transition: .3s ease;

  &:hover {
    @include color('primary', 'lighten', 2)
  }
}

.text-truncate {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.text-nowrap {
  white-space: nowrap !important;
}

.text-dotted {
  &:after {
    content: 'â€¦'
  }
}

::selection {
  background-color: map-get($theme-colors, 'dark');
  color: lighten(map-get($colors, 'white'), 75%);
}