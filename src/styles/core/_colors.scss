// List of colors defined by user
$colors: (
  'black':     #000000,
  'white':     #ffffff,
  'light':     #F9F9F9,
  'dark':      #343a40,
  'grey':      #E5EBEB,
  'pale':      #6A747D,
  'blue':      #4D4D9F,
  'indigo':    #6610f2,
  'purple':    #682cab,
  'pink':      #e83e8c,
  'red':       #DF5563,
  'orange':    #fd7e14,
  'yellow':    #FFB300,
  'green':     #45ca64,
  'teal':      #20c997,
  'cyan':      #17a2b8,
);

// Standard material color theme 
// https://material.io/design/color/the-color-system.html#tools-for-picking-colors
// You can disable this pallete if you don't need it in your project
$material-colors-support: true; 
$material-colors: (
  red:         #F44336,
  pink:        #E91E63,
  purple:      #9C27B0,
  deep-purple: #673AB7,
  indigo:      #3F51B5,
  blue:        #2196F3,
  light-blue:  #03A9F4,
  cyan:        #00BCD4,
  teal:        #009688,
  green:       #4CAF50,
  light-green: #8BC34A,
  lime:        #CDDC39,
  yellow:      #FFEB3B,
  amber:       #FFC107,
  orange:      #FF9800,
  deep-orange: #FF5722,
  brown:       #795548,
  grey:        #9E9E9E,
  blue-grey:   #607D8B
);

// Pick up theme colors from basic color pallete or material colors
$theme-colors: (
  'primary':    map-get($colors, 'purple'),
  'secondary':  map-get($colors, 'pale'),
  'success':    map-get($colors, 'green'),
  'info':       map-get($colors, 'cyan'),
  'warning':    map-get($colors, 'yellow'),
  'danger':     map-get($colors, 'red'),
  'light':      map-get($colors, 'light'),
  'dark':       map-get($colors, 'dark'),
);

// Levels of lighten, darken, saturate and desaturate values of colors in $colors list
$levels: (
  1: 5%,
  2: 10%,
  3: 15%,
  4: 20%,
  5: 25%,
);

// Basic page settings
$body-bg:           map-get($colors, 'light');
$body-color:        map-get($colors, 'dark');
$border-color:      map-get($colors, 'grey');
$headings-color:    map-get($colors, 'black');

@mixin background($name, $style: false, $rate: false) {
  $targetMap: $colors;
  @if map-has-key($theme-colors, $name) {
    $targetMap: $theme-colors;
  }

  @if $style {
    @if $style == 'lighten' {
      background-color: lighten(map-get($targetMap, $name), map-get($levels, $rate)) !important
    } @else if $style == 'darken' {
      background-color: darken(map-get($targetMap, $name), map-get($levels, $rate)) !important
    } @else if $style == 'saturate' {
      background-color: saturate(map-get($targetMap, $name), map-get($levels, $rate)) !important
    } @else if $style == 'desaturate' {
      background-color: desaturate(map-get($targetMap, $name), map-get($levels, $rate)) !important
    }
  } @else {
    background-color: map-get($targetMap, $name) !important
  }
}

@mixin color($name, $style: false, $rate: false) {
  $targetMap: $colors;
  @if map-has-key($theme-colors, $name) {
    $targetMap: $theme-colors;
  }

  @if $style {
    @if $style == 'lighten' {
      color: lighten(map-get($targetMap, $name), map-get($levels, $rate)) !important
    } @else if $style == 'darken' {
      color: darken(map-get($targetMap, $name), map-get($levels, $rate)) !important
    } @else if $style == 'saturate' {
      color: saturate(map-get($targetMap, $name), map-get($levels, $rate)) !important
    } @else if $style == 'desaturate' {
      color: desaturate(map-get($targetMap, $name), map-get($levels, $rate)) !important
    }
  } @else {
    color: map-get($targetMap, $name) !important
  }
}

@mixin fill($name, $style: false, $rate: false) {
  $targetMap: $colors;
  @if map-has-key($theme-colors, $name) {
    $targetMap: $theme-colors;
  }

  @if $style {
    @if $style == 'lighten' {
      fill: lighten(map-get($targetMap, $name), map-get($levels, $rate)) !important
    } @else if $style == 'darken' {
      fill: darken(map-get($targetMap, $name), map-get($levels, $rate)) !important
    } @else if $style == 'saturate' {
      fill: saturate(map-get($targetMap, $name), map-get($levels, $rate)) !important
    } @else if $style == 'desaturate' {
      fill: desaturate(map-get($targetMap, $name), map-get($levels, $rate)) !important
    }
  } @else {
    fill: map-get($targetMap, $name) !important
  }
}

@each $name, $code in $colors {
  .bg-#{$name} { background-color: $code !important }
  .clr-#{$name} { color: $code !important }
  .fill-#{$name} { fill: $code !important }

  @each $level, $rate in $levels {
    .bg-#{$name}-lighten-#{$level} { background-color: lighten($code, $rate) !important }
    .bg-#{$name}-darken-#{$level} { background-color: darken($code, $rate) !important }
    .bg-#{$name}-saturate-#{$level} { background-color: saturate($code, $rate) !important }
    .bg-#{$name}-desaturate-#{$level} { background-color: desaturate($code, $rate) !important }

    .clr-#{$name}-lighten-#{$level} { color: lighten($code, $rate) !important }
    .clr-#{$name}-darken-#{$level} { color: darken($code, $rate) !important }
    .clr-#{$name}-saturate-#{$level} { color: saturate($code, $rate) !important }
    .clr-#{$name}-desaturate-#{$level} { color: desaturate($code, $rate) !important }

    .fill-#{$name}-lighten-#{$level} { fill: lighten($code, $rate) !important }
    .fill-#{$name}-darken-#{$level} { fill: darken($code, $rate) !important }
    .fill-#{$name}-saturate-#{$level} { fill: saturate($code, $rate) !important }
    .fill-#{$name}-desaturate-#{$level} { fill: desaturate($code, $rate) !important }
  }
}

@each $name, $code in $theme-colors {
  .bg-#{$name} { background-color: $code !important }
  .clr-#{$name} { color: $code !important }
  .fill-#{$name} { fill: $code !important }

  @each $level, $rate in $levels {
    .bg-#{$name}-lighten-#{$level} { background-color: lighten($code, $rate) !important }
    .bg-#{$name}-darken-#{$level} { background-color: darken($code, $rate) !important }
    .bg-#{$name}-saturate-#{$level} { background-color: saturate($code, $rate) !important }
    .bg-#{$name}-desaturate-#{$level} { background-color: desaturate($code, $rate) !important }

    .clr-#{$name}-lighten-#{$level} { color: lighten($code, $rate) !important }
    .clr-#{$name}-darken-#{$level} { color: darken($code, $rate) !important }
    .clr-#{$name}-saturate-#{$level} { color: saturate($code, $rate) !important }
    .clr-#{$name}-desaturate-#{$level} { color: desaturate($code, $rate) !important }

    .fill-#{$name}-lighten-#{$level} { fill: lighten($code, $rate) !important }
    .fill-#{$name}-darken-#{$level} { fill: darken($code, $rate) !important }
    .fill-#{$name}-saturate-#{$level} { fill: saturate($code, $rate) !important }
    .fill-#{$name}-desaturate-#{$level} { fill: desaturate($code, $rate) !important }
  }
}

// https://codepen.io/jonrohan/pen/NNGaBO
@function colorMap($material-colors, $variations) {
  $colors:();
  
  @each $color, $value in $material-colors {
    $maxVar: 36;
    $mid: $variations / 2;
    $dist: $mid - 1;
    $step: $maxVar / $dist;
    
    // lighten and darken
    @for $i from 1 through $dist {
      $percent: $maxVar - ($step * ($i - 1));
      $darken: ($variations - $i) * 100;
      $lighten: $i * 100;

      $colors: map-merge($colors, (
         #{$color}-#{$lighten}: lighten($value, $percent),
         #{$color}-#{$darken}:  darken($value, $percent)
      ));
    }

    // middle eg 500
    $colors: map-merge($colors, (#{$color}-50: lighten($value, 38.7)));
    $colors: map-merge($colors, (#{$color}-#{$variations/2*100}: $value));
  }
  @return $colors;
};

@if $material-colors-support {
  @each $color, $value in colorMap($material-colors, 10) {
    .bg-#{$color} { background-color: $value !important }
    .clr-#{$color} { color: $value !important }
    .fill-#{$color} { fill: $value !important }
  }
}
