@each $name, $code in $colors {
  .bg-#{$name} { background-color: $code !important }
  .clr-#{$name} { color: $code !important }
  .fill-#{$name} { fill: $code !important }

  @each $level, $rate in $levels {
    .bg-#{$name}-lighten-#{$level} { background-color: lighten($code, $rate) !important }
    .bg-#{$name}-darken-#{$level} { background-color: darken($code, $rate) !important }
    .bg-#{$name}-saturate-#{$level} { background-color: saturate($code, $rate) !important }
    .bg-#{$name}-desaturate-#{$level} { background-color: desaturate($code, $rate) !important }

    .clr-#{$name}-lighten-#{$level} { color: lighten($code, $rate) !important }
    .clr-#{$name}-darken-#{$level} { color: darken($code, $rate) !important }
    .clr-#{$name}-saturate-#{$level} { color: saturate($code, $rate) !important }
    .clr-#{$name}-desaturate-#{$level} { color: desaturate($code, $rate) !important }

    .fill-#{$name}-lighten-#{$level} { fill: lighten($code, $rate) !important }
    .fill-#{$name}-darken-#{$level} { fill: darken($code, $rate) !important }
    .fill-#{$name}-saturate-#{$level} { fill: saturate($code, $rate) !important }
    .fill-#{$name}-desaturate-#{$level} { fill: desaturate($code, $rate) !important }
  }
}

@each $name, $code in $theme-colors {
  .bg-#{$name} { background-color: $code !important }
  .clr-#{$name} { color: $code !important }
  .fill-#{$name} { fill: $code !important }

  @each $level, $rate in $levels {
    .bg-#{$name}-lighten-#{$level} { background-color: lighten($code, $rate) !important }
    .bg-#{$name}-darken-#{$level} { background-color: darken($code, $rate) !important }
    .bg-#{$name}-saturate-#{$level} { background-color: saturate($code, $rate) !important }
    .bg-#{$name}-desaturate-#{$level} { background-color: desaturate($code, $rate) !important }

    .clr-#{$name}-lighten-#{$level} { color: lighten($code, $rate) !important }
    .clr-#{$name}-darken-#{$level} { color: darken($code, $rate) !important }
    .clr-#{$name}-saturate-#{$level} { color: saturate($code, $rate) !important }
    .clr-#{$name}-desaturate-#{$level} { color: desaturate($code, $rate) !important }

    .fill-#{$name}-lighten-#{$level} { fill: lighten($code, $rate) !important }
    .fill-#{$name}-darken-#{$level} { fill: darken($code, $rate) !important }
    .fill-#{$name}-saturate-#{$level} { fill: saturate($code, $rate) !important }
    .fill-#{$name}-desaturate-#{$level} { fill: desaturate($code, $rate) !important }
  }
}

// https://codepen.io/jonrohan/pen/NNGaBO
@function colorMap($material-colors, $variations) {
  $colors:();
  
  @each $color, $value in $material-colors {
    $maxVar: 36;
    $mid: $variations / 2;
    $dist: $mid - 1;
    $step: $maxVar / $dist;
    
    // lighten and darken
    @for $i from 1 through $dist {
      $percent: $maxVar - ($step * ($i - 1));
      $darken: ($variations - $i) * 100;
      $lighten: $i * 100;

      $colors: map-merge($colors, (
         #{$color}-#{$lighten}: lighten($value, $percent),
         #{$color}-#{$darken}:  darken($value, $percent)
      ));
    }

    // middle eg 500
    $colors: map-merge($colors, (#{$color}-50: lighten($value, 38.7)));
    $colors: map-merge($colors, (#{$color}-#{$variations/2*100}: $value));
  }
  @return $colors;
};

@if $material-colors-support {
  @each $color, $value in colorMap($material-colors, 10) {
    .bg-#{$color} { background-color: $value !important }
    .clr-#{$color} { color: $value !important }
    .fill-#{$color} { fill: $value !important }
  }
}
