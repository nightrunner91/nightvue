// ============================ // 
// ====== GLOBAL SETTINGS ===== //
// ============================ // 

$base-fz: 16px; // ‚ùó CRUCIAL VALUE! A lot of things depends on it. Be aware.
$base-lh: map-get($line-heights, 50);
$base-fw: map-get($font-weights, 400);
$base-mg: map-get($spacers, 1);
$small-fz: 0.875; // ratio of how lower will be font-size for <small> tag


// ======================== // 
// ====== BODY STYLES ===== //
// ======================== // 

body {
  overflow-x: hidden;
  overflow-y: visible;
  font-family: map-get($font-families, base), sans-serif;
  font-weight: map-get($font-weights, 400);
  font-size: $base-fz;
  line-height: $base-lh;
  background-color: color('white');
  color: color('gray-9');

  &.body--locked { overflow-y: hidden }
}


// ================================ // 
// ====== HEADINGS & DISPLAYS ===== //
// ================================ //

h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3, .h4, .h5, .h6 {
  display: block;
  margin-top: map-get($headings-margins, top);
  margin-bottom: map-get($headings-margins, bottom);
  font-family: map-get($font-families, headings), sans-serif;
  font-weight: $headings-fw;
  line-height: $headings-lh;
  color: color('gray-9');
}

@each $heading, $size in $headings-fz {
  #{$heading},
  .#{$heading} {
    font-size: $size;

    @if ($headings-breake) {
      @media screen and (max-width: map-get($breakpoints, $headings-breakepoint)) {
        font-size: $size * $headings-decrease
      }
    }
  }
}

@each $display, $size in $displays-fz {
  .#{$display} {
    font-size: $size;
    font-family: map-get($font-families, displays), sans-serif;
    font-weight: $displays-fw;
    line-height: $displays-lh;

    @if ($displays-breake) {
      @media screen and (max-width: map-get($breakpoints, $displays-breakepoint)) {
        font-size: $size * $displays-decrease
      }
    }
  }
}


// ======================== //
// ====== TEXT STYLES ===== //
// ======================== //

p,
ul,
ol,
pre,
table,
blockquote {
  display: block;
  margin-top: 0;
  margin-bottom: $base-mg;
  padding: 0;
  font-size: $base-fz;
  line-height: $base-lh;
}

ul,
ol {
  &.list-unstyled {
    list-style-type: none !important;
  }
}

small,
.small {
  font-size: $base-fz * $small-fz;
  line-height: $base-lh * $small-fz;
}

mark {
  background-color: rgba(black, 0.75);
}

code, kbd, samp, pre {
  @include small();
  
  margin-bottom: $base-mg;
  padding: .2em .5em;
  border-radius: radius('base');
  background-color: color('gray-1');
  white-space: nowrap;
  color: color('green');
}

hr {
  box-sizing: border-box;
  width: 100%;
  height: 0;
  margin-top: $base-mg;
  margin-bottom: $base-mg;
  border: none;
  border-bottom: 1px solid rgba(black, .15);
}

@mixin textStyles($breakpoint:null) {
  @each $lh, $value in $line-heights {
    .line-height#{$breakpoint}-#{$lh} { line-height: $value !important; }
  }
  @each $align, $value in $text-aligns {
    .text#{$breakpoint}-#{$align} { text-align: $value !important; }
  }
  @each $decoration, $value in $text-decorations {
    .text#{$breakpoint}-#{$decoration} { text-decoration: $value !important; }
  }
  @each $wrap, $value in $text-wraps {
    .text#{$breakpoint}-#{$wrap} { white-space: $value !important; }
  }
  @each $transform, $value in $text-transforms {
    .text#{$breakpoint}-#{$transform} { text-transform: $value !important; }
  }
  @each $weight, $value in $font-weights {
    .font-weight#{$breakpoint}-#{$weight} { font-weight: $value !important; }
  }
  @each $style, $value in $font-styles {
    .font#{$breakpoint}-#{$style} { font-style: $value !important; }
  }
  @each $spacing, $value in $letter-spacings {
    .spacing#{$breakpoint}-#{$spacing} { letter-spacing: $value !important; }
  }
}

@include textStyles();

@each $breakpoint, $size in $breakpoints {
  @media screen and (min-width: #{$size}) {
    @include textStyles('-' + $breakpoint);
  }
}

// =========================== //
// ====== TEXT SELECTION ===== //
// =========================== //

@mixin selection($background, $color) {
  ::-moz-selection {
    background-color: color($background);
    color: color($color);
  }
  
  ::selection {
    background-color: color($background);
    color: color($color);
  }
}

@include selection('black', 'white');
