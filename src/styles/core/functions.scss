@function spacer($val1, $val2: false, $val3: false, $val4: false) {
  /// Function returns specified spacer value from $spacers map
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  ///
  /// @param $val1: { Number | String }, [spacer value, required]
  /// @param $val2: { Number | String }, [spacer value]
  /// @param $val3: { Number | String }, [spacer value]
  /// @param $val4: { Number | String }, [spacer value]
  ///
  /// If you pass one $val it will return spacer value from $spacers map
  /// If you pass two params it will return X and Y spacer values
  /// If you pass four params it will return top, right, bottom and left spacer values
  /// Possible variants of params by default are: 0, 25, 50, 75, 1, 2, 3, 4, 5 and auto
  /// 
  /// @example
  ///   padding: spacer(2);
  ///   padding-right: spacer(1);
  ///   margin: spacer(3, auto);
  ///   margin: spacer(50, auto, 2, 0);
  ///
  /// @output
  ///   padding: 2rem;
  ///   padding-right: 1rem;
  ///   margin: 3rem auto;
  ///   margin: .5rem auto 2rem 0;

  @if ($val2 and $val4 == false) {
    @return map-get($spacers, $val1) map-get($spacers, $val2);
  }
  @else if ($val2 and $val4) {
    @return map-get($spacers, $val1) map-get($spacers, $val2) map-get($spacers, $val3) map-get($spacers, $val4);
  }
  @else {
    @return map-get($spacers, $val1)
  }
};

@function color($name, $style: false, $rate:false) {
  /// Function returns color from maps $colors, $grays and $theme-colors
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  ///
  /// @param $name:  { String }, [color name, required]
  /// @param $style: { String }, [color style: light | dark]
  /// @param $rate:  { Number }, [color rate: 1...5 (based on $levels map)]
  /// 
  /// @example
  ///   box-shadow: 1px 1px 4px color('primary');
  ///   border-color: color('brown', light, 4);
  ///   background-color: color('secondary');
  ///   color: color('white');
  ///
  /// @output
  ///   box-shadow: 1px 1px 4px #682CAB;
  ///   border-color: #9b8076;
  ///   background-color: #2196F3;
  ///   color: #ffffff;

  $targetMap: $colors;
  @if map-has-key($theme-colors, $name) {
    $targetMap: $theme-colors;
  }
  @if map-has-key($grays, $name) {
    $targetMap: $grays;
  }

  $color: map-get($targetMap, $name);

  @if $style {
    $level: map-get($levels, $rate);

    @if $style == 'light' {
      @return mix(white, $color, $level)
    } @else if $style == 'dark' {
      @return mix(black, $color, $level)
    }
  } @else {
    @return $color
  }
};

@function radius($type) {
  /// Function returns specified border-radius value from $radiuses map
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  ///
  /// @param $type: { String }, [border-radius name, required]
  /// 
  /// @example
  ///   border-radius: radius('small');
  ///   border-radius: radius('circle');
  ///   border-top-left-radius: radius('zero');
  ///
  /// @output
  ///   border-radius: 4px;
  ///   border-radius: 100%;
  ///   border-top-left-radius: 0;

  @return map-get($radiuses, $type);
};

@function shadow($name) {
  /// Function returns box-shadow value from $shadows map
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/box-shadow
  ///
  /// @param $type: { String }, [box-shadow name, required]
  /// 
  /// @example
  ///   box-shadow: shadow('level-1');
  ///   box-shadow: shadow('level-2');
  ///   box-shadow: shadow('level-3');
  ///   box-shadow: shadow('level-4');
  ///   box-shadow: shadow('level-5');
  ///
  /// @output
  ///   box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
  ///   box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
  ///   box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
  ///   box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
  ///   box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);

  @return map-get($shadows, $name)
};

@function transition-speed($name) {
  @return map-get($transition-speed, $name);
};

@function transition-timing($name) {
  @return map-get($transition-timings, $name);
};

@function transition($property, $speed:base, $timing:ease, $delay:0s) {
  $delayCond: if($delay != 0s, $delay, null);

  @return $property transition-speed($speed) transition-timing($timing) $delayCond
};

@function replace-in-list($list, $old-value, $new-value, $recursive: false) {
  /// This function replace value from list with another value
  ///
  /// @author Kitty
  /// 
  /// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions/
  ///
  /// @example
  ///   $list: a, b, r, a, c a, d a, b, r, a;
  ///   $new-list: replace($list, a, u); // u, b, r, u, c a, d a, b, r, u;
  ///   $new-list: replace($list, a, u, true); // u, b, r, u, c u, d u, b, r, u;

  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append(
        $result,
        replace(nth($list, $i), $old-value, $new-value, $recursive)
      );
    } @else {
      @if nth($list, $i) == $old-value {
        $result: append($result, $new-value);
      } @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

@function to-string($list, $glue: '', $is-nested: false) {
  /// Function converts SCSS map to String
  ///
  /// @author Kitty
  /// 
  /// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions/
  ///
  /// @example
  ///   $list: a, b, c d e, f, g, h;
  ///   $new-list: to-string($list); // abcdefgh
  ///   $new-list: to-string($list, '-'); // a-b-c-d-e-f-g-h

  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    } @else {
      $result: if(
        $i != length($list) or $is-nested,
        $result#{$e}#{$glue},
        $result#{$e}
      );
    }
  }

  @return $result;
};
