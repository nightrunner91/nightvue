@mixin animation(
  $name,
  $duration,
  $delay: 0s,
  $count: 1,
  $direction: normal,
  $timing: ease-in,
  $mode: forwards,
  $state: running) {
    /// Mixin applies animation to selector with passed params
    /// It will generate shorted syntax for animation (animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode Ğ¸ animation-play-state)
    /// Output also will have -webkit prefix
    ///
    /// @author nightrunner91
    /// 
    /// @link https://github.com/nightrunner91/nightvue
    /// @link https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Animations/
    ///
    /// @param $name:      { String } [animation name]
    /// @param $duration:  { Number | String } [s | ms | system speed]
    /// @param $delay:     { Number } [s | ms, default: 0s]
    /// @param $count:     { Number | String } [Number | infinite, default: 1]
    /// @param $direction: { String } [normal | reverse | alternate | alternate-reverse, default: normal]
    /// @param $timing:    { String } [easing type | system easing, default: ease-in]
    /// @param $mode:      { String } [forwards | backwards | both, default: forwards]
    /// @param $state:     { String } [running | paused | default: running]
    /// 
    /// @example
    ///   @include animation(
    ///     $name: spin,
    ///     $duration: 2s
    ///   );
    ///
    /// @output
    ///   animation: spin 2s cubic-bezier(0.42, 0, 1, 1) 0s 1 normal forwards;
    ///
    /// @example
    ///   @include animation(
    ///     $name: spin,
    ///     $duration: slow,
    ///     $delay: 1s,
    ///     $count: infinite,
    ///     $direction: reverse,
    ///     $timing: emphasized
    ///     $state: paused
    ///   );
    ///
    /// @output
    ///   animation: spin 0.375s cubic-bezier(0, 0, 0.2, 1) 1s infinite reverse forwards paused;

    $animation: (
      $name,
      $duration,
      $timing,
      $delay,
      $count,
      $direction,
      $mode,
      $state
    );

    @if map-has-key($transition-speed, $duration) {
      $animation: replace-in-list($animation, $duration, map-get($transition-speed, $duration))
    }

    @if map-has-key($transition-timings, $timing) {
      $animation: replace-in-list($animation, $timing, map-get($transition-timings, $timing))
    }

    -webkit-animation: to-string($animation, ' ');
    animation: to-string($animation, ' ');
};

@mixin font-face(
  $font-name,
  $font-file,
  $font-weight: 400, 
  $font-style: normal, 
  $support-required: 'modern') {
  /// Mixin that imports fonts to your project
  /// 
  /// @author David Pollet
  /// 
  /// @link https://codepen.io/davidpollet/pen/ORyYap/?js-preprocessor=babel
  /// @link https://css-tricks.com/snippets/css/using-font-face/
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/@font-face
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/font-style
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/font-weight
  /// @link https://fonts.google.com/
  /// 
  /// @param $font-name:        { String }, [name of font, be sure to save your font files in so-called folder]
  /// @param $font-file:        { String }, [file name, for example : 'RobotoBold']
  /// @param $font-weight:      { Number }, [font-weight, 100...900, default: 400]
  /// @param $font-style:       { String }, [font-style, default: normal]
  /// @param $support-required: { String }, [additional formats that must be included, oldie | recent | modern]
  /// 
  /// @example
  ///   @include font-face('Roboto', 'RobotoRegular');
  ///   @include font-face('Roboto', 'RobotoBold', 700, normal, 'recent');
  ///   @include font-face('Montserrat', 'MontserratBoldItalic', 700, italic, 'recent');

  @font-face {
    font-family: $font-name;
    font-style : $font-style;
    font-weight: $font-weight;

    @if $support-required == 'oldie' {
      src: url('../assets/fonts/#{$font-name}/#{$font-file}.eot');
      src: url('../assets/fonts/#{$font-name}/#{$font-file}.eot?#iefix') format('embedded-opentype'),
      url('../assets/fonts/#{$font-name}/#{$font-file}.woff2') format('woff2'),
      url('../assets/fonts/#{$font-name}/#{$font-file}.woff') format('woff'),
      url('../assets/fonts/#{$font-name}/#{$font-file}.ttf') format('truetype');
    }
    @if $support-required == 'recent' {
      src: url('../assets/fonts/#{$font-name}/#{$font-file}.woff2') format('woff2'),
      url('../assets/fonts/#{$font-name}/#{$font-file}.woff') format('woff'),
      url('../assets/fonts/#{$font-name}/#{$font-file}.ttf') format('truetype');
    }
    @if $support-required == 'modern' {
      src: url('../assets/fonts/#{$font-name}/#{$font-file}.woff2') format('woff2'),
      url('../assets/fonts/#{$font-name}/#{$font-file}.woff') format('woff');
    }
  }
  @if $support-required != 'oldie' and $support-required != 'recent' and $support-required != 'modern' {
    @error 'Invalid support-required value. Must be "oldie"==>IE8 and above/ Android native browser 4+/ Safari 4.3 OR "recent"==>IE9+/ Android native browser 4.0+/ Safari 4.3+ OR "modern"==>IE9+/ Android native browser 4.4+/ Safari 5.1+';
  }
};

@mixin linear-gradient($name) {
  /// Mixin generates code that includes the default color for browsers 
  /// that do not support linear gradients and modern syntax
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://caniuse.com/?search=linear-gradient
  /// @link https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient
  /// @link https://www.colorzilla.com/gradient-editor/
  ///
  /// @param $name: { String } [name of gradient in $gradients map]
  /// 
  /// @example
  ///   @include linear-gradient('primary_success');
  ///
  /// @output
  ///   background: #682cab;
  ///   background: linear-gradient(145deg, #8e51d2 10%, #68c279 80%);

  @if map-has-key($gradients, quote($name)) {
    $target: map-get($gradients, $name);

    $direction: nth(nth($target, 1), 2);
    $fallback:  nth(nth($target, 2), 2);
    $list:      nth(nth($target, 3), 2);

    background: $fallback;
    background: linear-gradient($direction, $list);
  } @else {
    @debug 'No such gradient, check $gradients map in variables.scss file'
  }
};

@mixin container($type:'combined', $gutter:$gutter-width) {
  /// Mixin applies container styles to selector
  /// 
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  /// 
  /// @param $type:   { String }, [boxed | combined | full, default: combined]
  /// @param $gutter: { Number }, [defines left and right paddings, default: 1rem]
  /// 
  /// @example
  ///   @include container();
  ///   @include container('full');
  ///   @include container($type: 'boxed', $gutter: 2rem);

  margin-left: auto;
  margin-right: auto;
  padding-left: $gutter;
  padding-right: $gutter;
  max-width: 100%;

  @if $type == 'boxed' {
    @each $breakpoint, $size in $breakpoints {
      @media screen and (min-width: #{map-get($breakpoints, $breakpoint)}) {
        max-width: map-get($containers, $breakpoint)
      }
    }
  } @else if $type == 'combined' {
    $last-breakpoint: nth(nth($breakpoints, length($breakpoints)), 1);

    @media screen and (min-width: #{map-get($breakpoints, $last-breakpoint)}) {
      max-width: map-get($containers, $last-breakpoint)
    }
  }
};

@mixin row($gutter:$gutter-width) {
  /// Mixin applies row styles to selector
  /// 
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  /// 
  /// @param $gutter: { Number }, [defines left and right negative margins, default: 1rem / -2]
  /// 
  /// @example
  ///   @include row();
  ///   @include row(0);
  ///   @include row($gutter: 2rem);

  display: flex;
  flex-wrap: wrap;
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
};

@mixin col-width($cols) {
  /// Mixin applies percentage width to selector
  /// Mostly usable to calculate columns width on specific breakpoints
  /// See @col mixin below for details
  /// 
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/flex-basis
  /// 
  /// @param $cols: { Number }, [number of columns to calculate, 1...12 based on $num-cols]
  /// 
  /// @example 
  ///   @include col-width(1);
  ///   @include col-width(5);
  ///   @include col-width(12);

  $perc: percent($cols, $num-cols);
  
  max-width: $perc;
  flex-basis: $perc;
  -ms-flex-preferred-size: $perc;
};

@mixin col(
  $cols: $num-cols, 
  $xs: $num-cols, 
  $sm: $num-cols, 
  $md: $num-cols, 
  $lg: $num-cols, 
  $xl: $num-cols) {
    /// Mixin applies column styles (paddings and width) to selector
    /// If you don't pass any params mixin will apply only padding-left and padding right
    /// based on $gutter-width varaible
    /// To apply width properties you can pass number from 1 to 12 for each breakpoint
    /// 
    /// @author nightrunner91
    /// 
    /// @link https://github.com/nightrunner91/nightvue
    /// 
    /// @param $cols: { Number } [number of columns by default, 1...12, default 12]
    /// @param $xs:   { Number } [number of columns for $xs breakpoint, 1...12, default 12]
    /// @param $sm:   { Number } [number of columns for $sm breakpoint, 1...12, default 12]
    /// @param $md:   { Number } [number of columns for $md breakpoint, 1...12, default 12]
    /// @param $lg:   { Number } [number of columns for $lg breakpoint, 1...12, default 12]
    /// @param $xl:   { Number } [number of columns for $xl breakpoint, 1...12, default 12]
    /// 
    /// @example
    ///   @include col();
    ///   @include col(12);
    ///   @include col(10, $md: 8);
    ///   @include col(10, $md: 8, $lg: 6, $xs: 12);
    ///   @include col(12, 10, 10, 8, 6, 9);

    padding-left: $gutter-width / 2;
    padding-right: $gutter-width / 2;

    @if (
      $cols > $num-cols or $cols <= 0 or 
      $xs > $num-cols or $xs <= 0 or 
      $sm > $num-cols or $sm <= 0 or 
      $md > $num-cols or $md <= 0 or 
      $lg > $num-cols or $lg <= 0 or 
      $xl > $num-cols or $xl <= 0) {
      @error 'Passed value must be between 1 and $num-cols inclusively (12 by default)';
    } @else {
      @if ($cols < $num-cols and $cols > 0) {
        @include col-width($cols)
      }
      @if ($xs < $num-cols and $xs > 0) {
        @media #{$xs-up} {  @include col-width($xs) }
      }
      @if ($sm < $num-cols and $sm > 0) {
        @media #{$sm-up} { @include col-width($sm) }
      }
      @if ($md < $num-cols and $md > 0) {
        @media #{$md-up} { @include col-width($md) }
      }
      @if ($lg < $num-cols and $lg > 0) {
        @media #{$lg-up} { @include col-width($lg) }
      }
      @if ($xl < $num-cols and $xl > 0) {
        @media #{$xl-up} { @include col-width($xl) }
      }
    }
};

@mixin offset(
  $cols: $num-cols, 
  $xs: $num-cols, 
  $sm: $num-cols, 
  $md: $num-cols, 
  $lg: $num-cols, 
  $xl: $num-cols) {
    /// Mixin applies offset to selector (margin-left value)
    /// To apply this margin you can pass number from 0 to 12 for each breakpoint
    /// If you don't pass any params, mixin won't apply any styles
    /// 
    /// @author nightrunner91
    /// 
    /// @link https://github.com/nightrunner91/nightvue
    /// 
    /// @param $cols: { Number } [number of columns by default, 1...12, default 12]
    /// @param $xs:   { Number } [number of columns for $xs breakpoint, 1...12, default 12]
    /// @param $sm:   { Number } [number of columns for $sm breakpoint, 1...12, default 12]
    /// @param $md:   { Number } [number of columns for $md breakpoint, 1...12, default 12]
    /// @param $lg:   { Number } [number of columns for $lg breakpoint, 1...12, default 12]
    /// @param $xl:   { Number } [number of columns for $xl breakpoint, 1...12, default 12]
    /// 
    /// @example
    ///   @include offset(6);
    ///   @include offset(0, $sm: 4);
    ///   @include offset(10, $md: 8);
    ///   @include offset(10, $md: 8, $lg: 6, $xs: 12);
    ///   @include offset($sm: 1, $lg: 4, $xl: 0);

    @if (
      $cols > $num-cols or $cols < 0 or 
      $xs > $num-cols or $xs < 0 or 
      $sm > $num-cols or $sm < 0 or 
      $md > $num-cols or $md < 0 or 
      $lg > $num-cols or $lg < 0 or 
      $xl > $num-cols or $xl < 0) {
      @error 'Passed value must be between 0 and $num-cols inclusively (12 by default)';
    } @else {
      @if ($cols < $num-cols and $cols >= 0) {
        margin-left: percent($cols, $num-cols)
      }
      @if ($xs < $num-cols and $xs >= 0) {
        @media #{$xs-up} { margin-left: percent($xs, $num-cols) }
      }
      @if ($sm < $num-cols and $sm >= 0) {
        @media #{$sm-up} { margin-left: percent($sm, $num-cols) }
      }
      @if ($md < $num-cols and $md >= 0) {
        @media #{$md-up} { margin-left: percent($md, $num-cols) }
      }
      @if ($lg < $num-cols and $lg >= 0) {
        @media #{$lg-up} { margin-left: percent($lg, $num-cols) }
      }
      @if ($xl < $num-cols and $xl >= 0) {
        @media #{$xl-up} { margin-left: percent($xl, $num-cols) }
      }
    }
};

@mixin order(
  $cols: $num-cols, 
  $xs: $num-cols, 
  $sm: $num-cols, 
  $md: $num-cols, 
  $lg: $num-cols, 
  $xl: $num-cols) {
    /// Mixin applies flex order to selector
    /// To apply this you can pass number from 1 to 12 for each breakpoint
    /// If you don't pass any params, mixin won't apply any styles
    /// 
    /// @author nightrunner91
    /// 
    /// @link https://github.com/nightrunner91/nightvue
    /// @link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Ordering_Flex_Items
    /// @link https://css-tricks.com/almanac/properties/o/order/
    /// 
    /// @param $cols: { Number } [number of columns by default, 1...12, default 12]
    /// @param $xs:   { Number } [number of columns for $xs breakpoint, 1...12, default 12]
    /// @param $sm:   { Number } [number of columns for $sm breakpoint, 1...12, default 12]
    /// @param $md:   { Number } [number of columns for $md breakpoint, 1...12, default 12]
    /// @param $lg:   { Number } [number of columns for $lg breakpoint, 1...12, default 12]
    /// @param $xl:   { Number } [number of columns for $xl breakpoint, 1...12, default 12]
    /// 
    /// @example
    ///   @include order(2);
    ///   @include order(1, $sm: 4);
    ///   @include order(1, $md: 2, $lg: 3, $xs: 12);
    ///   @include order($sm: 12, $lg: 4, $xl: 3);

    @if (
      $cols > $num-cols or $cols <= 0 or 
      $xs > $num-cols or $xs <= 0 or 
      $sm > $num-cols or $sm <= 0 or 
      $md > $num-cols or $md <= 0 or 
      $lg > $num-cols or $lg <= 0 or 
      $xl > $num-cols or $xl <= 0) {
      @error 'Passed value must be between 1 and $num-cols inclusively (12 by default)';
    } @else {
      @if ($cols < $num-cols and $cols > 0) {
        order: $cols
      }
      @if ($xs < $num-cols and $xs > 0) {
        @media #{$xs-up} { order: $xs }
      }
      @if ($sm < $num-cols and $sm > 0) {
        @media #{$sm-up} { order: $sm }
      }
      @if ($md < $num-cols and $md > 0) {
        @media #{$md-up} { order: $md }
      }
      @if ($lg < $num-cols and $lg > 0) {
        @media #{$lg-up} { order: $lg }
      }
      @if ($xl < $num-cols and $xl > 0) {
        @media #{$xl-up} { order: $xl }
      }
    }
};

@mixin small() {
  /// Small mixin that injects small font-size styles
  /// See variables.scss file for params $base-fz, $small-fz, $small-lh and $small-fw
  /// By default they are: 16px, 0.875, 1.25, 400
  ///
  /// @author nightrunner91
  ///
  /// @link https://github.com/nightrunner91/nightvue
  /// 
  /// @example
  ///   @include small();
  ///
  /// @output
  ///   font-size: 14px;
  ///   line-height: 1.3125;
  ///   font-weight: 400;

  font-size: $base-fz * $small-fz;
  line-height: $small-lh;
  font-weight: $small-fw;
};

@mixin tagline() {
  /// Small mixin that injects tagline font-size styles
  /// See variables.scss file for params $base-fz, $tagline-fz, $tagline-lh, $tagline-fw
  /// By default they are: 16px, 1.25, 1.5, 500
  ///
  /// @author nightrunner91
  ///
  /// @link https://github.com/nightrunner91/nightvue
  /// 
  /// @example
  ///   @include tagline();
  ///
  /// @output
  ///   font-size: 14px;
  ///   line-height: 1.3125;
  ///   font-weight: 500;

  font-size: $base-fz * $tagline-fz;
  line-height: $tagline-lh;
  font-weight: $tagline-fw;
};

@mixin pseudoelem() {
  /// Often you need to add &:before or &:after for decoration purposes
  /// Just for that you have this small mixin to simplify your work
  ///
  /// @example
  ///   @include pseudoelem();

  content: '';
  display: block;
  position: absolute;
}

@mixin icon-size($d1, $d2:false) {
  /// This mixin apply specific width and height
  /// If you apply this mixin to selector you can be pretty sure it will have
  /// passed dimensions no matter what and will not be compressed or stretched
  /// It is most usefull for SVG icons inside flex container
  ///
  /// @author nightrunner91
  ///
  /// @link https://github.com/nightrunner91/nightvue
  ///
  /// @param $d1: { Number | String }, [required, dimension X (width)]
  /// @param $d2: { Number | String }, [dimension Y (height)]
  /// 
  /// @example
  ///   @include icon-size(lg);
  ///
  /// @output
  ///   width: 1.25em !important;
  ///   max-width: 1.25em !important;
  ///   min-width: 1.25em !important;
  ///   height: 1.25em !important;
  ///   max-height: 1.25em !important;
  ///   min-height: 1.25em !important;
  /// 
  /// @example
  ///   @include icon-size(24);
  ///
  /// @output
  ///   width: 24px !important;
  ///   max-width: 24px !important;
  ///   min-width: 24px !important;
  ///   height: 24px !important;
  ///   max-height: 24px !important;
  ///   min-height: 24px !important;
  ///
  /// @example
  ///   @include icon-size(18, 34);
  ///
  /// @output
  ///   width: 18px !important;
  ///   max-width: 18px !important;
  ///   min-width: 18px !important;
  ///   height: 34px !important;
  ///   max-height: 34px !important;
  ///   min-height: 34px !important;

  width: $d1 !important;
  max-width: $d1 !important;
  min-width: $d1 !important;

  @if ($d2) {
    height: $d2 !important;
    max-height: $d2 !important;
    min-height: $d2 !important;
  } @else {
    height: $d1 !important;
    max-height: $d1 !important;
    min-height: $d1 !important;
  }
};

@mixin text-truncate($width) {
  /// Mixin applies truncated text effect to selector
  ///
  /// @author nightrunner91
  /// 
  /// @link https://github.com/nightrunner91/nightvue
  /// @link https://css-tricks.com/snippets/css/truncate-string-with-ellipsis/
  /// @link https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow
  /// @link https://developer.mozilla.org/ru/docs/Web/CSS/white-space
  ///
  /// @param $width: { Number } [required, maximum width of text in px | %]
  /// 
  /// @example
  ///   @include text-truncate(150px);
  ///
  /// @output
  ///   display: inline-block;
  ///   overflow: hidden;
  ///   text-overflow: ellipsis;
  ///   white-space: nowrap;
  ///   max-width: 150px;

  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: $width;
};
