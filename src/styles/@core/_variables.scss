// ================ //
// ===== Grid ===== //
// ================ //

/// Base grid settings
$num-cols:      12;
$gutter-width:  1rem;

$grid-type: 'combined';
/// ðŸ‘‰ boxed      => on each $breakpoint container will have fixed max-width based on $containers map
/// ðŸ‘‰ combined   => container will have max-width of LAST value from $containers map, then will have 100%
/// ðŸ‘‰ full       => container will ALWAYS have 100% width

/// Breakpoints are dublicated in 'store/modules/config.js'
$breakpoints: (
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px,
  xl: 1400px
);

/// Containers max-widths (if you are using 'boxed' or 'combined' type)
$containers: (
  xs: 540px,
  sm: 720px,
  md: 960px,
  lg: 1140px,
  xl: 1320px
);

// Queries between breakpoints
$xs-sm: "screen and (min-width: #{map-get($breakpoints, 'xs')}) and (max-width: #{map-get($breakpoints, 'sm') - 1px})" !default;
$sm-md: "screen and (min-width: #{map-get($breakpoints, 'sm')}) and (max-width: #{map-get($breakpoints, 'md') - 1px})" !default;
$md-lg: "screen and (min-width: #{map-get($breakpoints, 'md')}) and (max-width: #{map-get($breakpoints, 'lg') - 1px})" !default;
$lg-xl: "screen and (min-width: #{map-get($breakpoints, 'lg')}) and (max-width: #{map-get($breakpoints, 'xl') - 1px})" !default;

// Queries based on min-width
$xs-up: "screen and (min-width: #{map-get($breakpoints, 'xs')})" !default;
$sm-up: "screen and (min-width: #{map-get($breakpoints, 'sm')})" !default;
$md-up: "screen and (min-width: #{map-get($breakpoints, 'md')})" !default;
$lg-up: "screen and (min-width: #{map-get($breakpoints, 'lg')})" !default;
$xl-up: "screen and (min-width: #{map-get($breakpoints, 'xl')})" !default;

// Queries based on max-width
$xs-dw: "screen and (max-width: #{map-get($breakpoints, 'xs') - 1px})" !default;
$sm-dw: "screen and (max-width: #{map-get($breakpoints, 'sm') - 1px})" !default;
$md-dw: "screen and (max-width: #{map-get($breakpoints, 'md') - 1px})" !default;
$lg-dw: "screen and (max-width: #{map-get($breakpoints, 'lg') - 1px})" !default;
$xl-dw: "screen and (max-width: #{map-get($breakpoints, 'xl') - 1px})" !default;


// =================== //
// ===== Spacing ===== //
// =================== //

$spacers: (
  0:    0,
  25:   .25rem,
  50:   .5rem,
  75:   .75rem,
  1:    1rem,
  2:    2rem,
  3:    3rem,
  4:    4rem,
  5:    5rem,
  auto: auto
);

$base-mg: map-get($spacers, 1); // Universal margin used for <p>, <ul> etc.


// ================== //
// ===== Sizing ===== //
// ================== //

$sizings: (
  0:    0,   // 0%   | 0vw   | 0vh
  25:   25,  // 25%  | 25vw  | 25vh
  50:   50,  // 50%  | 50vw  | 50vh
  75:   75,  // 75%  | 75vw  | 75vh
  100:  100, // 100% | 100vw | 100vh
  auto: auto // auto
);


// ====================== //
// ===== Typography ===== //
// ====================== //

$font-families: (
  base:      "Onest",
  headings:  "Onest",
  displays:  "Onest"
);

$line-heights: (
  1:  1,
  25: 1.25,
  50: 1.5,
  75: 1.75,
  2:  2,
);

$text-aligns: (
  left:    left, 
  center:  center, 
  right:   right, 
  justify: justify
);

$font-weights: (
  lighter: lighter, 
  bolder:  bolder, 

  100: 100, // thin
  200: 200, // extra light
  300: 300, // light
  400: 400, // normal
  500: 500, // medium
  600: 600, // semi bold
  700: 700, // bold
  800: 800, // extra bold
  900: 900, // black
);

$text-transforms: (
  lowercase:  lowercase, 
  uppercase:  uppercase, 
  capitalize: capitalize
);

$font-styles: (
  normal:  normal, 
  italic:  italic, 
  oblique: oblique
);

$text-decorations: (
  underline:    underline, 
  line-through: line-through, 
  none:         none
);

$text-wraps: (
  normal:   normal,
  nowrap:   nowrap,
  pre:      pre,
  pre-line: pre-line,
  pre-wrap: pre-wrap
);

$letter-spacings: (
  normal:  normal,
  tight:   -0.05em,
  wide:   .1em,
  wider:  .5em,
);

$headings-fz: (
  h1: 4.5rem,
  h2: 2.5rem,
  h3: 1.75rem,
  h4: 1.25rem,
  h5: 1rem,
  h6: 0.875rem,
);
$headings-lh: map-get($line-heights, 25);
$headings-fw: map-get($font-weights, 500);
$headings-margins: (
  top: map-get($spacers, 1),
  bottom: map-get($spacers, 50),
);

$displays-fz: (
  display-1: 74px,
  display-2: 62px,
  display-3: 48px,
  display-4: 34px,
);
$displays-lh: map-get($line-heights, 25);
$displays-fw: map-get($font-weights, 500);
$displays-margins: (
  top: map-get($spacers, 1),
  bottom: map-get($spacers, 50),
);

$base-fz:      16px; // CRUCIAL VALUE! A lot of things depends on it. Be aware.
$base-lh:      map-get($line-heights, 50);
$base-fw:      map-get($font-weights, 400);

$small-fz:     0.875; // Ratio of text size for <small> tag and .small classname
$small-lh:     map-get($line-heights, 25);
$small-fw:     map-get($font-weights, 400);

$tagline-fz:   1.25; // Ratio of text size for .tagline classname
$tagline-lh:   map-get($line-heights, 50);
$tagline-fw:   map-get($font-weights, 500);


// ================== //
// ===== Colors ===== //
// ================== //

// List of 'basic' colors
$colors: (
  'red':      #F44336,
  'pink':     #EC407A,
  'orange':   #FF9800,
  'yellow':   #FFEE58,
  'green':    #47b05b,
  'brown':    #795548,
  'teal':     #009688,
  'cyan':     #00BCD4,
  'blue':     #2196F3,
  'purple':   #682CAB,
);

// List of gray colors
$grays: (
  'white':   #ffffff,
  'gray-1':  #eaeaea,
  'gray-2':  #d5d5d5,
  'gray-3':  #bfbfbf,
  'gray-4':  #aaaaaa,
  'gray-5':  #959595,
  'gray-6':  #cccccc,
  'gray-7':  #6a6a6a,
  'gray-8':  #555555,
  'gray-9':  #404040,
  'gray-10': #2b2b2b,
  'black':   #000000,
);

// List of theme colors picked from two maps above
$theme-colors: (
  'primary':    map-get($colors, 'purple'),
  'secondary':  map-get($colors, 'blue'),
  'success':    map-get($colors, 'green'),
  'info':       map-get($colors, 'teal'),
  'warning':    map-get($colors, 'yellow'),
  'danger':     map-get($colors, 'red'),
  'light':      map-get($grays, 'gray-2'),
  'dark':       map-get($grays, 'gray-8'),
);

// Levels of mix() and scale()
$levels: (
  1: 10%,
  2: 15%,
  3: 20%,
  4: 25%,
  5: 30%,
);


// ===================== //
// ===== Gradients ===== //
// ===================== //

/// This is list of all linear-gradients used in project
/// 
/// @param direction: { String }, [keyword or angle]
/// @param fallback:  { String }, [color by default for unsupported browsers]
/// @param list:      { Array },  [list of colors in gradient, separated by a comma]
///
/// Keywords:
///   to top,
///   to top right,
///   to right,
///   to bottom right,
///   to bottom,
///   to bottom left,
///   to left, 
///   to left top.
///
/// Angle value in:
///   deg,
///   rad,
///   grad,
///   turn.
///
/// @example
///   gradientName: (
///     direction: { String },
///     fallback: { String },
///     list: ( { String }, { String }, { String }... )
///   )

$gradients: (
  primary_success: (
    direction: 145deg,
    fallback: map-get($theme-colors, 'primary'),
    list: (
      lighten(map-get($theme-colors, 'primary'), map-get($levels, 2)) 10%,
      lighten(map-get($theme-colors, 'success'), map-get($levels, 1)) 80%
    )
  ),

  primary-light-3_primary: (
    direction: to bottom,
    fallback: map-get($theme-colors, 'primary'),
    list: (
      map-get($theme-colors, 'primary'),
      lighten(map-get($theme-colors, 'primary'), map-get($levels, 3))
    )
  ),

  red_yellow_blue: (
    direction: to right,
    fallback: map-get($colors, 'red'),
    list: (
      map-get($colors, 'red'),
      map-get($colors, 'yellow'),
      map-get($colors, 'blue')
    )
  ),

  info_transparent: (
    direction: 90deg,
    fallback: map-get($theme-colors, 'info'),
    list: (
      map-get($theme-colors, 'info'),
      transparent
    )
  ),
);


// =================== //
// ===== Opacity ===== //
// =================== //

$opacities: (
  0: 0%,
  25: 25%,
  50: 50%,
  75: 75%,
  100: 100%
);


// ========================= //
// ===== Border-radius ===== //
// ========================= //

$radiuses: (
  'small':   4px,
  'base':    8px,
  'large':   20px,
  'circle':  100%,
  'zero':    0
);


// ======================= //
// ===== Icons Sizes ===== //
// ======================= //

$icon-sizes: (
  18,
  24,
  36,
  48,
  64
);


// =================== //
// ===== Shadows ===== //
// =================== //

/// By default this map contains list of shadows based on Material methodology
/// @link https://material.io/design/environment/light-shadows.html
/// @link https://material.io/design/environment/elevation.html
/// Sure you can remove them and/or add your own

$shadows: (
  level-1: (0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)),
  level-2: (0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)),
  level-3: (0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)),
  level-4: (0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)),
  level-5: (0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22)),
);


// ======================= //
// ===== Transitions ===== //
// ======================= //

$transition-speed: (
  shortest: .15s,
  shorter:  .2s,
  short:    .25s,
  base:     .3s,
  slow:     .375s,
  slower:   .5s,
  lazy:     .75s,
);

$transition-timings: (
  /// "Standard" and most usefull easings
  /// @link https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function#easing_functions
  /// @link https://cubic-bezier.com/
  linear:       cubic-bezier(0, 0, 1, 1),
  ease:         cubic-bezier(0.25, 0.1, 0.25, 1),
  ease-in:      cubic-bezier(0.42, 0, 1, 1),
  ease-out:     cubic-bezier(0,0,0.58,1),
  ease-in-out:  cubic-bezier(0.42, 0, 0.58, 1),

  /// Material Design easings list
  /// @link https://material.io/design/motion/speed.html#easing
  standard:     cubic-bezier(0.4, 0, 0.2, 1),   // speed up quickly and slow down gradually, in order to emphasize the end of the transition
  emphasized:   cubic-bezier(0.0, 0, 0.2, 1),   // speed up quickly and slow down very gradually, placing extra emphasis on the end of the transition
  decelerated:  cubic-bezier(0.0, 0.0, 0.2, 1), // transitions begin at peak velocity (the fastest point in an element's movement) and end at rest
  accelerated:  cubic-bezier(0.4, 0.0, 1, 1),   // transition in which the element starts at rest and ends at peak velocity

  /// Custom easings (here you can add new ones)
  sharp:        cubic-bezier(0.4, 0, 0.6, 1)  // the sharp curve is used for objects that may return to the screen at any time
);
